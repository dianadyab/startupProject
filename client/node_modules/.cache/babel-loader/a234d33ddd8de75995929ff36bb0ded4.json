{"ast":null,"code":"\"use strict\";\n/**\n * Copyright (C) 2016-2019 Michael Kourlas\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar error_1 = require(\"../error\");\n\nvar validate_1 = require(\"../validate\");\n/**\n * Represents a processing instruction.\n *\n * A processing instruction is structured as follows, where `{target}` and\n * `{content}` are the target and content of the processing instruction\n * respectively:\n *\n * ```xml\n * <?{target} {content}?>\n * ```\n */\n\n\nvar XmlProcInst =\n/** @class */\nfunction () {\n  function XmlProcInst(parent, validation, options) {\n    this._validation = validation;\n    this._parent = parent;\n    this.content = options.content;\n    this.target = options.target;\n  }\n\n  Object.defineProperty(XmlProcInst.prototype, \"content\", {\n    /**\n     * Gets the content of this processing instruction.\n     */\n    get: function get() {\n      return this._content;\n    },\n\n    /**\n     * Sets the content of this processing instruction.\n     */\n    set: function set(content) {\n      if (!validate_1.isUndefined(content)) {\n        if (this._validation && !validate_1.validateChar(content)) {\n          throw new Error(error_1.getContext(this.up()) + \": processing\" + (\" instruction content \\\"\" + content + \"\\\" should\") + \" not contain characters not allowed in XML\");\n        } else if (this._validation && content.indexOf(\"?>\") !== -1) {\n          throw new Error(error_1.getContext(this.up()) + \": processing\" + (\" instruction content \\\"\" + content + \"\\\" should\") + \" not contain the string '?>'\");\n        }\n      }\n\n      this._content = content;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XmlProcInst.prototype, \"target\", {\n    /**\n     * Gets the target of this processing instruction.\n     */\n    get: function get() {\n      return this._target;\n    },\n\n    /**\n     * Sets the content of this processing instruction.\n     */\n    set: function set(target) {\n      if (this._validation && !validate_1.validateName(target)) {\n        throw new Error(error_1.getContext(this.up()) + \": processing\" + (\" instruction target \\\"\" + target + \"\\\" should\") + \" not contain characters not allowed in XML\" + \" names\");\n      }\n\n      if (this._validation && target === \"xml\") {\n        throw new Error(error_1.getContext(this.up()) + \": processing\" + (\" instruction target \\\"\" + target + \"\\\" should\") + \" not be the string 'xml'\");\n      }\n\n      this._target = target;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Returns an XML string representation of this processing instruction.\n   */\n\n  XmlProcInst.prototype.toString = function () {\n    if (validate_1.isUndefined(this._content)) {\n      return \"<?\" + this._target + \"?>\";\n    } else {\n      return \"<?\" + this._target + \" \" + this._content + \"?>\";\n    }\n  };\n  /**\n   * Returns the parent of this processing instruction.\n   */\n\n\n  XmlProcInst.prototype.up = function () {\n    return this._parent;\n  };\n\n  return XmlProcInst;\n}();\n\nexports.default = XmlProcInst;","map":null,"metadata":{},"sourceType":"script"}