{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\example-create-react-app-express-master\\\\my-app\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\example-create-react-app-express-master\\\\my-app\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\example-create-react-app-express-master\\\\my-app\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\example-create-react-app-express-master\\\\my-app\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\example-create-react-app-express-master\\\\my-app\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\example-create-react-app-express-master\\\\my-app\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\example-create-react-app-express-master\\\\my-app\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\example-create-react-app-express-master\\\\my-app\\\\client\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\n\nvar request = require('request');\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      //response the get request come from the /api/hello route\n      response: '',\n      drug: '',\n      disease: '',\n      type: '',\n      responseToPost: '' // response to submit\n\n    };\n    _this.callApi =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var response, body;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch('/api/');\n\n            case 2:\n              response = _context.sent;\n              _context.next = 5;\n              return response.json();\n\n            case 5:\n              body = _context.sent;\n\n              if (!(response.status !== 200)) {\n                _context.next = 8;\n                break;\n              }\n\n              throw Error(body.message);\n\n            case 8:\n              return _context.abrupt(\"return\", body);\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    _this.handleSubmit =\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(e) {\n        var request, xmlRequest, response, body;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                e.preventDefault();\n                request = {\n                  drug: _this.state.drug,\n                  disease: _this.state.disease,\n                  type: _this.state.type\n                };\n                xmlRequest = js2xmlparser.parse(\"request\", request);\n                _context2.next = 5;\n                return fetch('/api/submit', {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json'\n                  },\n                  body: JSON.stringify({\n                    drug: _this.state.drug,\n                    disease: _this.state.disease,\n                    type: _this.state.type\n                  })\n                });\n\n              case 5:\n                response = _context2.sent;\n                _context2.next = 8;\n                return response.text();\n\n              case 8:\n                body = _context2.sent;\n\n                _this.setState({\n                  responseToPost: body\n                });\n                /*request.post(\n                    {url:'http://127.0.0.1:3000/api/submit',\n                    body :'<xs:element name=\"customer\" type=\"xs:normalizedString\"/><nama>diana</name>',\n                    json:false,\n                     method:\"POST\",\n                    headers: {'Content-Type': 'text/xml'}\n                    },\n                    function (error, response, body) {\n                        if (!error && response.statusCode == 200) {\n                            console.log(body)\n                        }\n                    }\n                );*/\n\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n\n    /*callApi method to interact with  GET Express API route\n    we call this method in componentDidMount and finally set the state to the API response\n    */\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.callApi().then(function (res) {\n        return _this2.setState({\n          response: res.express\n        });\n      }).catch(function (err) {\n        return console.log(err);\n      });\n    }\n    /*calls our POST Express API route then saves the response to\n     state and displays a message to the user: I received your POST request.\n     This is what you sent me: [message from input].*/\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, React.createElement(\"pre\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, this.state.response), React.createElement(\"form\", {\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, \"Post to Server:\")), \"drug\", React.createElement(\"input\", {\n        type: \"text\",\n        value: this.state.drug,\n        onChange: function onChange(e) {\n          return _this3.setState({\n            drug: e.target.value\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }), \"disease\", React.createElement(\"input\", {\n        type: \"text\",\n        value: this.state.disease,\n        onChange: function onChange(e) {\n          return _this3.setState({\n            disease: e.target.value\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }), \"type\", React.createElement(\"select\", {\n        value: this.state.type,\n        onChange: function onChange(e) {\n          return _this3.setState({\n            type: e.target.value\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, \"select value\"), React.createElement(\"option\", {\n        value: \"1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, \"1\"), React.createElement(\"option\", {\n        value: \"2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, \"2\")), React.createElement(\"button\", {\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, \"Submit\")), React.createElement(\"pre\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, this.state.responseToPost));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["C:\\example-create-react-app-express-master\\my-app\\client\\src\\App.js"],"names":["React","Component","request","require","App","state","response","drug","disease","type","responseToPost","callApi","fetch","json","body","status","Error","message","handleSubmit","e","preventDefault","xmlRequest","js2xmlparser","parse","method","headers","JSON","stringify","text","setState","then","res","express","catch","err","console","log","target","value"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nvar request = require('request');\n\n\n\nclass App extends Component {\n  state = {\n    //response the get request come from the /api/hello route\n    response: '',\n    drug:'',\n    disease:'',\n    type:'',\n    responseToPost: '',// response to submit\n  };\n\n  /*callApi method to interact with  GET Express API route\n  we call this method in componentDidMount and finally set the state to the API response\n  */\n componentDidMount() {\n    this.callApi()\n      .then(res => this.setState({ response: res.express }))\n      .catch(err => console.log(err));\n  }\n\n  /*calls our POST Express API route then saves the response to\n   state and displays a message to the user: I received your POST request.\n   This is what you sent me: [message from input].*/\n\n\n  callApi = async () => {\n    const response = await fetch('/api/');\n\n    const body = await response.json();\n\n\n    if (response.status !== 200) throw Error(body.message);\n\n    return body;\n\n  };\n\n handleSubmit =async  e =>{\n\n     e.preventDefault();\n     const request = {\n    drug: this.state.drug,\n    disease: this.state.disease,\n    type: this.state.type\n};\n\nconst xmlRequest = js2xmlparser.parse(\"request\", request);\n\n     const response = await fetch('/api/submit', {\n       method: 'POST',\n\n       headers: {\n         'Content-Type': 'application/json'\n       },\n\n       body:JSON.stringify({\n          drug: this.state.drug,\n            disease: this.state.disease,\n              type: this.state.type,\n\n         })\n\n\n     });\n     //get the response\n     const body = await response.text();\n\n     this.setState({ responseToPost: body });\n\n\n/*request.post(\n    {url:'http://127.0.0.1:3000/api/submit',\n    body :'<xs:element name=\"customer\" type=\"xs:normalizedString\"/><nama>diana</name>',\n    json:false,\n     method:\"POST\",\n    headers: {'Content-Type': 'text/xml'}\n    },\n    function (error, response, body) {\n        if (!error && response.statusCode == 200) {\n            console.log(body)\n        }\n    }\n);*/\n\n   }\n\n  render() {\n    return (\n      <div className=\"App\">\n      <pre>{this.state.response}</pre>\n\n\n        <form onSubmit={this.handleSubmit}>\n          <p>\n            <strong>Post to Server:</strong>\n          </p>\n          drug\n          <input\n            type=\"text\"\n            value={this.state.drug}\n            onChange={e => this.setState({ drug: e.target.value })}\n          />\n\n          disease\n          <input\n            type=\"text\"\n            value={this.state.disease}\n            onChange={e => this.setState({ disease: e.target.value })}\n          />\n          type\n\n          <select value={this.state.type} onChange={e => this.setState({ type: e.target.value })}>\n          <option >select value</option>\n           <option value=\"1\">1</option>\n           <option value=\"2\">2</option>\n\n         </select>\n\n\n          <button type=\"submit\">Submit</button>\n        </form>\n        <pre>{this.state.responseToPost}</pre>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}