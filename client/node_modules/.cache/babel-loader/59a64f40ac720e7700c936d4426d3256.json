{"ast":null,"code":"\"use strict\";\n/**\n * Copyright (C) 2016-2019 Michael Kourlas\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar options_1 = require(\"../options\");\n\nvar validate_1 = require(\"../validate\");\n\nvar XmlComment_1 = __importDefault(require(\"./XmlComment\"));\n\nvar XmlDecl_1 = __importDefault(require(\"./XmlDecl\"));\n\nvar XmlDtd_1 = __importDefault(require(\"./XmlDtd\"));\n\nvar XmlElement_1 = __importDefault(require(\"./XmlElement\"));\n\nvar XmlProcInst_1 = __importDefault(require(\"./XmlProcInst\"));\n/**\n * Represents a document.\n *\n * A sample document is structured as follows:\n *\n * ```xml\n * <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n * <DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"\n *                      \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n * <html>\n *     <head>\n *         <title>My page title</title>\n *     </head>\n *     <body>\n *         <h1>Welcome!</h1>\n *         <p>I hope you enjoy visiting my website.</p>\n *         <img src=\"picture.png\"/>\n *     </body>\n * </html>\n * ```\n *\n * Each component of the document, such as the declaration, document type\n * definition, and root element, are children of this node.\n *\n * Documents must have exactly one element, which is the document's root\n * element.\n *\n * Documents can have exactly one declaration and one document type definition\n * in that order, so long as they precede the element.\n *\n * Documents can have an unlimited number of comments or processing\n * instructions, so long as they follow the declaration, if one exists.\n */\n\n\nvar XmlDocument =\n/** @class */\nfunction () {\n  function XmlDocument(options) {\n    this._children = [];\n    this._validation = !validate_1.isUndefined(options.validation) ? options.validation : true;\n  }\n  /**\n   * Adds a comment to this document and returns the new comment.\n   */\n\n\n  XmlDocument.prototype.comment = function (options) {\n    var comment = new XmlComment_1.default(this, this._validation, options);\n\n    this._children.push(comment);\n\n    return comment;\n  };\n  /**\n   * Adds a declaration to this document and returns the new declaration.\n   */\n\n\n  XmlDocument.prototype.decl = function (options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    if (this._validation && this._children.length !== 0) {\n      throw new Error(\"in XML document: declaration must be the first\" + \" child\");\n    }\n\n    var declaration = new XmlDecl_1.default(this, this._validation, options);\n\n    this._children.push(declaration);\n\n    return declaration;\n  };\n  /**\n   * Adds a document type definition to this document and returns the new\n   * document type definition.\n   */\n\n\n  XmlDocument.prototype.dtd = function (options) {\n    var filteredChildren = this._children.filter(function (value) {\n      return value instanceof XmlElement_1.default;\n    });\n\n    if (this._validation && filteredChildren.length !== 0) {\n      throw new Error(\"in XML document: DTD must precede the root\" + \" element\");\n    }\n\n    var dtd = new XmlDtd_1.default(this, this._validation, options);\n\n    this._children.push(dtd);\n\n    return dtd;\n  };\n  /**\n   * Adds the root element to this document and returns the element.\n   */\n\n\n  XmlDocument.prototype.element = function (options) {\n    var filteredChildren = this._children.filter(function (value) {\n      return value instanceof XmlElement_1.default;\n    });\n\n    if (this._validation && filteredChildren.length !== 0) {\n      throw new Error(\"in XML document: only one root element is\" + \" permitted\");\n    }\n\n    var element = new XmlElement_1.default(this, this._validation, options);\n\n    this._children.push(element);\n\n    return element;\n  };\n  /**\n   * Adds a processing instruction to this document and returns the new\n   * processing instruction.\n   */\n\n\n  XmlDocument.prototype.procInst = function (options) {\n    var procInst = new XmlProcInst_1.default(this, this._validation, options);\n\n    this._children.push(procInst);\n\n    return procInst;\n  };\n  /**\n   * Returns an XML string representation of this document using the\n   * specified options.\n   */\n\n\n  XmlDocument.prototype.toString = function (options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var filteredChildren = this._children.filter(function (value) {\n      return value instanceof XmlElement_1.default;\n    });\n\n    if (this._validation && filteredChildren.length !== 1) {\n      throw new Error(\"in XML document: no more than one root element\" + \" is permitted\");\n    }\n\n    var optionsObj = new options_1.StringOptions(options);\n    var str = \"\";\n\n    for (var _i = 0, _a = this._children; _i < _a.length; _i++) {\n      var node = _a[_i];\n\n      if (node instanceof XmlDecl_1.default || node instanceof XmlDtd_1.default || node instanceof XmlElement_1.default) {\n        str += node.toString(options);\n      } else {\n        str += node.toString();\n      }\n\n      if (optionsObj.pretty) {\n        str += optionsObj.newline;\n      }\n    }\n\n    var len = str.length - optionsObj.newline.length;\n\n    if (str.substr(len) === optionsObj.newline) {\n      str = str.substr(0, len);\n    }\n\n    return str;\n  };\n\n  return XmlDocument;\n}();\n\nexports.default = XmlDocument;","map":null,"metadata":{},"sourceType":"script"}