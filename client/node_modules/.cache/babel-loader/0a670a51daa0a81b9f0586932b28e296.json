{"ast":null,"code":"\"use strict\";\n/**\n * Copyright (C) 2016-2019 Michael Kourlas\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar error_1 = require(\"../error\");\n\nvar options_1 = require(\"../options\");\n\nvar validate_1 = require(\"../validate\");\n\nvar XmlComment_1 = __importDefault(require(\"./XmlComment\"));\n\nvar XmlDtdAttlist_1 = __importDefault(require(\"./XmlDtdAttlist\"));\n\nvar XmlDtdElement_1 = __importDefault(require(\"./XmlDtdElement\"));\n\nvar XmlDtdEntity_1 = __importDefault(require(\"./XmlDtdEntity\"));\n\nvar XmlDtdNotation_1 = __importDefault(require(\"./XmlDtdNotation\"));\n\nvar XmlDtdParamEntityRef_1 = __importDefault(require(\"./XmlDtdParamEntityRef\"));\n\nvar XmlProcInst_1 = __importDefault(require(\"./XmlProcInst\"));\n/**\n * Represents an XML document type definition (DTD).\n *\n * A document type definition  is structured as follows, where `{name}` is\n * the name of the DTD, `{sysId}` is the system identifier of the DTD,\n * `{pubId}` is the public identifier of the DTD, and `{intSubset}` is the\n * internal subset of the DTD:\n *\n * ```xml\n * <!DOCTYPE {name} SYSTEM \"{sysId}\" PUBLIC \"{pubId}\" [\n *     {intSubset}\n * ]>\n * ```\n *\n * DTDs can have an unlimited number of comments, attribute-list declarations,\n * element declarations, entity declarations, notation declarations, parameter\n * entity references, and processing instructions.\n */\n\n\nvar XmlDtd =\n/** @class */\nfunction () {\n  function XmlDtd(parent, validation, options) {\n    this._pubId = undefined;\n    this._sysId = undefined;\n    this._validation = validation;\n    this._children = [];\n    this._parent = parent;\n    this.name = options.name;\n\n    if (!validate_1.isUndefined(options.sysId)) {\n      this.sysId = options.sysId;\n    }\n\n    if (!validate_1.isUndefined(options.pubId)) {\n      this.pubId = options.pubId;\n    }\n  }\n\n  Object.defineProperty(XmlDtd.prototype, \"name\", {\n    /**\n     * Gets the name of the DTD.\n     */\n    get: function get() {\n      return this._name;\n    },\n\n    /**\n     * Sets the name of the DTD.\n     */\n    set: function set(name) {\n      if (this._validation && !validate_1.validateName(name)) {\n        throw new Error(error_1.getContext(this.up()) + \": DTD name \\\"\" + name + \"\\\"\" + \" should not contain characters not allowed in\" + \" XML names\");\n      }\n\n      this._name = name;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XmlDtd.prototype, \"pubId\", {\n    /**\n     * Gets the public identifier of the DTD.\n     */\n    get: function get() {\n      return this._pubId;\n    },\n\n    /**\n     * Sets the public identifier of the DTD.\n     */\n    set: function set(pubId) {\n      if (!validate_1.isUndefined(pubId)) {\n        if (this._validation && !validatePubId(pubId)) {\n          throw new Error(error_1.getContext(this.up()) + \": DTD public\" + (\" identifier \\\"\" + pubId + \"\\\" should not contain\") + \" characters not allowed in public\" + \" identifiers\");\n        }\n\n        if (this._validation && validate_1.isUndefined(this._sysId)) {\n          throw new Error(error_1.getContext(this.up()) + \": DTD public\" + (\" identifier \\\"\" + pubId + \"\\\" should not be defined\") + \" if system identifier is undefined\");\n        }\n      }\n\n      this._pubId = pubId;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XmlDtd.prototype, \"sysId\", {\n    /**\n     * Gets the system identifier of the DTD.\n     */\n    get: function get() {\n      return this._sysId;\n    },\n\n    /**\n     * Sets the system identifier of the DTD.\n     */\n    set: function set(sysId) {\n      if (!validate_1.isUndefined(sysId)) {\n        if (this._validation && !validate_1.validateChar(sysId)) {\n          throw new Error(error_1.getContext(this.up()) + \": DTD system\" + (\" identifier \\\"\" + sysId + \"\\\" should not contain\") + \" characters not allowed in XML\");\n        } else if (this._validation && sysId.indexOf(\"'\") !== -1 && sysId.indexOf(\"\\\"\") !== -1) {\n          throw new Error(error_1.getContext(this.up()) + \": DTD system\" + (\" identifier \\\"\" + sysId + \"\\\" should not contain\") + \" both single quotes and double quotes\");\n        }\n      }\n\n      this._sysId = sysId;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Adds an attribute-list declaration to this document type declaration\n   * and returns the new attribute-list declaration.\n   */\n\n  XmlDtd.prototype.attlist = function (options) {\n    var attlist = new XmlDtdAttlist_1.default(this, this._validation, options);\n\n    this._children.push(attlist);\n\n    return attlist;\n  };\n  /**\n   * Adds a comment to this document type declaration and returns the\n   * new comment.\n   */\n\n\n  XmlDtd.prototype.comment = function (options) {\n    var comment = new XmlComment_1.default(this, this._validation, options);\n\n    this._children.push(comment);\n\n    return comment;\n  };\n  /**\n   * Adds an element declaration to this document type declaration\n   * and returns the new element declaration.\n   */\n\n\n  XmlDtd.prototype.element = function (options) {\n    var element = new XmlDtdElement_1.default(this, this._validation, options);\n\n    this._children.push(element);\n\n    return element;\n  };\n  /**\n   * Adds an entity declaration to this document type declaration\n   * and returns the new entity declaration.\n   */\n\n\n  XmlDtd.prototype.entity = function (options) {\n    var entity = new XmlDtdEntity_1.default(this, this._validation, options);\n\n    this._children.push(entity);\n\n    return entity;\n  };\n  /**\n   * Adds a notation declaration to this document type declaration\n   * and returns the new notation declaration.\n   */\n\n\n  XmlDtd.prototype.notation = function (options) {\n    var notation = new XmlDtdNotation_1.default(this, this._validation, options);\n\n    this._children.push(notation);\n\n    return notation;\n  };\n  /**\n   * Adds a parameter entity reference to this document type declaration\n   * and returns the new parameter entity reference.\n   */\n\n\n  XmlDtd.prototype.paramEntityRef = function (options) {\n    var paramEntity = new XmlDtdParamEntityRef_1.default(this, this._validation, options);\n\n    this._children.push(paramEntity);\n\n    return paramEntity;\n  };\n  /**\n   * Adds a processing instruction to this document type declaration\n   * and returns the new processing instruction.\n   */\n\n\n  XmlDtd.prototype.procInst = function (options) {\n    var procInst = new XmlProcInst_1.default(this, this._validation, options);\n\n    this._children.push(procInst);\n\n    return procInst;\n  };\n  /**\n   * Returns an XML string representation of this document type declaration.\n   */\n\n\n  XmlDtd.prototype.toString = function (options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var optionsObj = new options_1.StringOptions(options);\n    var str = \"<!DOCTYPE \" + this._name;\n\n    if (validate_1.isUndefined(this._pubId)) {\n      if (!validate_1.isUndefined(this._sysId)) {\n        str += \" \";\n        str = this.appendId(\"SYSTEM\", this._sysId, str, optionsObj);\n      }\n    } else {\n      if (validate_1.isUndefined(this._sysId)) {\n        throw new Error(error_1.getContext(this.up()) + \": DTD system\" + \" identifier is not undefined\");\n      }\n\n      str += \" \";\n      str = this.appendId(\"PUBLIC\", this._pubId, str, optionsObj);\n      str = this.appendId(\"\", this._sysId, str, optionsObj);\n    }\n\n    if (this._children.length !== 0) {\n      str += \" [\";\n\n      for (var _i = 0, _a = this._children; _i < _a.length; _i++) {\n        var node = _a[_i];\n\n        if (optionsObj.pretty) {\n          str += optionsObj.newline + optionsObj.indent;\n        }\n\n        str += node.toString();\n      }\n\n      if (optionsObj.pretty) {\n        str += optionsObj.newline;\n      }\n\n      str += \"]>\";\n    } else {\n      str += \">\";\n    }\n\n    return str;\n  };\n  /**\n   * Returns the parent of this attribute.\n   */\n\n\n  XmlDtd.prototype.up = function () {\n    return this._parent;\n  };\n  /**\n   * Appends the XML string representation of a public or system identifier\n   * to an existing string.\n   */\n\n\n  XmlDtd.prototype.appendId = function (type, value, str, options) {\n    str += type + \" \";\n\n    if (options.doubleQuotes) {\n      if (this._validation && value.indexOf(\"\\\"\") !== -1) {\n        throw new Error(error_1.getContext(this.up()) + \": doubleQuotes option\" + \" inconsistent with DTD system identifier or\" + \" public identifier\");\n      }\n\n      str += \"\\\"\" + value + \"\\\"\";\n    } else {\n      if (this._validation && value.indexOf(\"'\") !== -1) {\n        throw new Error(error_1.getContext(this) + \": doubleQuotes option\" + \" inconsistent with DTD system identifier or\" + \" public identifier\");\n      }\n\n      str += \"'\" + value + \"'\";\n    }\n\n    return str;\n  };\n\n  return XmlDtd;\n}();\n\nexports.default = XmlDtd;\n/**\n * Returns true if the specified public identifier only contains characters\n * permitted by the XML specification.\n *\n * @private\n */\n\nfunction validatePubId(str) {\n  for (var i = 0; i < str.length; i++) {\n    var _char = str.charCodeAt(i);\n\n    if (_char === 0xA || _char === 0xD || _char === 0x20 || _char === 0x21 || _char >= 0x23 && _char <= 0x25 || _char >= 0x27 && _char <= 0x2F || _char >= 0x30 && _char <= 0x39 || _char === 0x3A || _char === 0x3B || _char === 0x3D || _char === 0x3F || _char >= 0x40 && _char <= 0x5A || _char === 0x5F || _char >= 0x61 && _char <= 0x7A) {\n      continue;\n    }\n\n    if (i + 1 === str.length) {\n      return false;\n    }\n\n    return false;\n  }\n\n  return true;\n}\n\nexports.validatePubId = validatePubId;","map":null,"metadata":{},"sourceType":"script"}