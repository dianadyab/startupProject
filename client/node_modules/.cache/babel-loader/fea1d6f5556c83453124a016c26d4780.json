{"ast":null,"code":"\"use strict\";\n/**\n * Copyright (C) 2016-2019 Michael Kourlas\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar utils_1 = require(\"./utils\");\n/**\n * Implementation of the IOptions interface used to provide default values\n * to fields.\n *\n * @private\n */\n\n\nvar Options =\n/** @class */\nfunction () {\n  function Options(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this.aliasString = \"=\";\n    this.attributeString = \"@\";\n    this.cdataInvalidChars = false;\n    this.cdataKeys = [];\n    this.replaceInvalidChars = false;\n    this.useSelfClosingTagIfEmpty = true;\n    this.validation = true;\n    this.valueString = \"#\";\n\n    if (!utils_1.isUndefined(options.validation)) {\n      this.validation = options.validation;\n    }\n\n    if (!utils_1.isUndefined(options.aliasString)) {\n      this.aliasString = options.aliasString;\n    }\n\n    if (!utils_1.isUndefined(options.attributeString)) {\n      this.attributeString = options.attributeString;\n    }\n\n    if (!utils_1.isUndefined(options.cdataInvalidChars)) {\n      this.cdataInvalidChars = options.cdataInvalidChars;\n    }\n\n    if (!utils_1.isUndefined(options.cdataKeys)) {\n      this.cdataKeys = options.cdataKeys;\n    }\n\n    this.declaration = new DeclarationOptions(options.declaration);\n    this.dtd = new DtdOptions(this.validation, options.dtd);\n    this.format = new FormatOptions(options.format);\n\n    if (!utils_1.isUndefined(options.replaceInvalidChars)) {\n      this.replaceInvalidChars = options.replaceInvalidChars;\n    }\n\n    this.typeHandlers = new TypeHandlers(options.typeHandlers);\n\n    if (!utils_1.isUndefined(options.useSelfClosingTagIfEmpty)) {\n      this.useSelfClosingTagIfEmpty = options.useSelfClosingTagIfEmpty;\n    }\n\n    if (!utils_1.isUndefined(options.valueString)) {\n      this.valueString = options.valueString;\n    }\n\n    this.wrapHandlers = new WrapHandlers(options.wrapHandlers);\n  }\n\n  return Options;\n}();\n\nexports.Options = Options;\n/**\n * Implementation of the IDeclarationOptions interface used to provide default\n * values to fields.\n *\n * @private\n */\n\nvar DeclarationOptions =\n/** @class */\nfunction () {\n  function DeclarationOptions(declarationOptions) {\n    if (declarationOptions === void 0) {\n      declarationOptions = {};\n    }\n\n    this.include = true;\n\n    if (!utils_1.isUndefined(declarationOptions.include)) {\n      this.include = declarationOptions.include;\n    } // Validation performed by xmlcreate\n\n\n    this.encoding = declarationOptions.encoding;\n    this.standalone = declarationOptions.standalone;\n    this.version = declarationOptions.version;\n  }\n\n  return DeclarationOptions;\n}();\n\nexports.DeclarationOptions = DeclarationOptions;\n/**\n * Implementation of the IDtdOptions interface used to provide default values\n * to fields.\n *\n * @private\n */\n\nvar DtdOptions =\n/** @class */\nfunction () {\n  function DtdOptions(validation, dtdOptions) {\n    if (dtdOptions === void 0) {\n      dtdOptions = {};\n    }\n\n    this.include = false;\n\n    if (!utils_1.isUndefined(dtdOptions.include)) {\n      this.include = dtdOptions.include;\n    }\n\n    if (validation && utils_1.isUndefined(dtdOptions.name) && this.include) {\n      throw new Error(\"options.dtd.name should be defined if\" + \" options.dtd.include is true\");\n    }\n\n    this.name = dtdOptions.name;\n    this.sysId = dtdOptions.sysId;\n    this.pubId = dtdOptions.pubId;\n  }\n\n  return DtdOptions;\n}();\n\nexports.DtdOptions = DtdOptions;\n/**\n * Implementation of the IFormatOptions interface used to provide default values\n * to fields.\n *\n * @private\n */\n\nvar FormatOptions =\n/** @class */\nfunction () {\n  function FormatOptions(formatOptions) {\n    if (formatOptions === void 0) {\n      formatOptions = {};\n    }\n\n    this.doubleQuotes = formatOptions.doubleQuotes;\n    this.indent = formatOptions.indent;\n    this.newline = formatOptions.newline;\n    this.pretty = formatOptions.pretty;\n  }\n\n  return FormatOptions;\n}();\n\nexports.FormatOptions = FormatOptions;\n/**\n * Implementation of the ITypeHandlers interface used to provide default values\n * to fields.\n *\n * @private\n */\n\nvar TypeHandlers =\n/** @class */\nfunction () {\n  function TypeHandlers(typeHandlers) {\n    if (typeHandlers === void 0) {\n      typeHandlers = {};\n    }\n\n    for (var key in typeHandlers) {\n      if (typeHandlers.hasOwnProperty(key)) {\n        this[key] = typeHandlers[key];\n      }\n    }\n  }\n\n  return TypeHandlers;\n}();\n\nexports.TypeHandlers = TypeHandlers;\n/**\n * Implementation of the IWrapHandlers interface used to provide default values\n * to fields.\n *\n * @private\n */\n\nvar WrapHandlers =\n/** @class */\nfunction () {\n  function WrapHandlers(wrapHandlers) {\n    if (wrapHandlers === void 0) {\n      wrapHandlers = {};\n    }\n\n    for (var key in wrapHandlers) {\n      if (wrapHandlers.hasOwnProperty(key)) {\n        this[key] = wrapHandlers[key];\n      }\n    }\n  }\n\n  return WrapHandlers;\n}();\n\nexports.WrapHandlers = WrapHandlers;","map":null,"metadata":{},"sourceType":"script"}