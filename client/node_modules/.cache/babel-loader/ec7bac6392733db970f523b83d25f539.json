{"ast":null,"code":"\"use strict\";\n/**\n * Copyright (C) 2016-2019 Michael Kourlas\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar error_1 = require(\"../error\");\n\nvar validate_1 = require(\"../validate\");\n/**\n * Represents a character reference.\n *\n * A character reference is structured as follows, where `{dec}` is the\n * decimal representation code point corresponding to a particular Unicode\n * character:\n *\n * ```xml\n * &#{dec};\n * ```\n *\n * The corresponding hexadecimal version is structured as follows, where\n * `{hex}` is the hexadecimal representation code point corresponding to a\n * particular Unicode character:\n *\n * ```xml\n * &#x{hex};\n * ```\n *\n * Unicode characters outside of the Basic Multilingual Plane are represented\n * using a surrogate pair consisting of two character references.\n *\n * The `{dec}` and `{hex}` values are defined by the `char` and `hex`\n * properties of this node; the former is the character to be represented while\n * the latter indicates whether the decimal or hexadecimal representation\n * should be used.\n */\n\n\nvar XmlCharRef =\n/** @class */\nfunction () {\n  function XmlCharRef(parent, validation, options) {\n    this._hex = false;\n    this._validation = validation;\n    this._parent = parent;\n    this.char = options.char;\n\n    if (!validate_1.isUndefined(options.hex)) {\n      this.hex = options.hex;\n    }\n  }\n\n  Object.defineProperty(XmlCharRef.prototype, \"char\", {\n    /**\n     * Gets the character of this character reference.\n     */\n    get: function get() {\n      return this._char;\n    },\n\n    /**\n     * Sets the character of this character reference.\n     */\n    set: function set(_char) {\n      if (this._validation && !validate_1.validateSingleChar(_char)) {\n        throw new Error(error_1.getContext(this.up()) + \": character reference\" + (\" \\\"\" + _char + \"\\\" should reference a single character,\") + \" and this character should be allowed in XML\");\n      }\n\n      this._char = _char;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XmlCharRef.prototype, \"hex\", {\n    /**\n     * Gets whether the decimal or hexadecimal representation should be used\n     * for this character reference.\n     */\n    get: function get() {\n      return this._hex;\n    },\n\n    /**\n     * Sets whether the decimal or hexadecimal representation should be used\n     * for this character reference.\n     */\n    set: function set(hex) {\n      this._hex = hex;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Returns an XML string representation of this character reference.\n   */\n\n  XmlCharRef.prototype.toString = function () {\n    var _char2;\n\n    if (this._char.length === 1) {\n      _char2 = this._char.charCodeAt(0);\n    } else {\n      var first = this._char.charCodeAt(0);\n\n      if (first >= 0xD800 && first <= 0xDBFF && this._char.length > 1) {\n        var second = this._char.charCodeAt(1);\n\n        if (second >= 0xDC00 && second <= 0xDFFF) {\n          _char2 = (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n        } else {\n          throw new Error(error_1.getContext(this.up()) + \": character\" + (\" reference \\\"\" + this.char + \"\\\" should\") + \" reference a valid Unicode character\");\n        }\n      } else {\n        _char2 = first;\n      }\n    }\n\n    if (this._hex) {\n      return \"&#x\" + _char2.toString(16) + \";\";\n    } else {\n      return \"&#\" + _char2 + \";\";\n    }\n  };\n  /**\n   * Returns the parent of this character reference.\n   */\n\n\n  XmlCharRef.prototype.up = function () {\n    return this._parent;\n  };\n\n  return XmlCharRef;\n}();\n\nexports.default = XmlCharRef;","map":null,"metadata":{},"sourceType":"script"}