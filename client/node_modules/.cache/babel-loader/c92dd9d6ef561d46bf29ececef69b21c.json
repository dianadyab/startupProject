{"ast":null,"code":"\"use strict\";\n/**\n * Copyright (C) 2016-2019 Michael Kourlas\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar error_1 = require(\"../error\");\n\nvar escape_1 = require(\"../escape\");\n\nvar validate_1 = require(\"../validate\");\n/**\n * Represents text in an attribute value.\n *\n * Restricted characters, such as the ampersand (`&`) and the opening angle\n * bracket (`<`), are all automatically escaped.\n */\n\n\nvar XmlAttributeText =\n/** @class */\nfunction () {\n  function XmlAttributeText(parent, validation, options) {\n    this._validation = validation;\n\n    if (!validate_1.isUndefined(options.replaceInvalidCharsInCharData)) {\n      this._replaceInvalidCharsInCharData = options.replaceInvalidCharsInCharData;\n    } else {\n      this._replaceInvalidCharsInCharData = false;\n    }\n\n    this._parent = parent;\n    this.charData = options.charData;\n  }\n\n  Object.defineProperty(XmlAttributeText.prototype, \"charData\", {\n    /**\n     * Gets this attribute text.\n     */\n    get: function get() {\n      return this._charData;\n    },\n\n    /**\n     * Sets this attribute text.\n     */\n    set: function set(charData) {\n      if (this._replaceInvalidCharsInCharData) {\n        charData = validate_1.fixChar(charData);\n      } else if (this._validation && !validate_1.validateChar(charData)) {\n        throw new Error(error_1.getContext(this.up()) + \": attribute text\" + (\" \\\"\" + charData + \"\\\" should not contain characters not\") + \" allowed in XML\");\n      }\n\n      this._charData = charData;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Returns an XML string representation of this attribute text.\n   */\n\n  XmlAttributeText.prototype.toString = function () {\n    var str = this._charData;\n    str = escape_1.escapeAmpersands(str);\n    str = escape_1.escapeLeftAngleBrackets(str);\n    return str;\n  };\n  /**\n   * Returns the parent of this attribute text.\n   */\n\n\n  XmlAttributeText.prototype.up = function () {\n    return this._parent;\n  };\n\n  return XmlAttributeText;\n}();\n\nexports.default = XmlAttributeText;","map":null,"metadata":{},"sourceType":"script"}