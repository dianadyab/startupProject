{"ast":null,"code":"\"use strict\";\n/**\n * Copyright (C) 2016-2019 Michael Kourlas\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar error_1 = require(\"../error\");\n\nvar validate_1 = require(\"../validate\");\n/**\n * Represents a comment.\n *\n * A comment is structured as follows, where `{content}` is the text of the\n * comment:\n *\n * ```xml\n * <!--{content}-->\n * ```\n */\n\n\nvar XmlComment =\n/** @class */\nfunction () {\n  function XmlComment(parent, validation, options) {\n    this._validation = validation;\n\n    if (!validate_1.isUndefined(options.replaceInvalidCharsInCharData)) {\n      this._replaceInvalidCharsInCharData = options.replaceInvalidCharsInCharData;\n    } else {\n      this._replaceInvalidCharsInCharData = false;\n    }\n\n    this._parent = parent;\n    this.charData = options.charData;\n  }\n\n  Object.defineProperty(XmlComment.prototype, \"charData\", {\n    /**\n     * Gets the text of this comment.\n     */\n    get: function get() {\n      return this._charData;\n    },\n\n    /**\n     * Sets the text of this comment.\n     */\n    set: function set(charData) {\n      if (this._replaceInvalidCharsInCharData) {\n        charData = validate_1.fixChar(charData);\n      } else if (this._validation && !validate_1.validateChar(charData)) {\n        throw new Error(error_1.getContext(this.up()) + \": comment content\" + (\" \\\"\" + charData + \"\\\" should not contain characters\") + \" not allowed in XML\");\n      }\n\n      if (this._replaceInvalidCharsInCharData) {\n        charData = charData.replace(\"--\", \"\\uFFFD\\uFFFD\");\n      } else if (this._validation && charData.indexOf(\"--\") !== -1) {\n        throw new Error(error_1.getContext(this.up()) + \": comment content\" + (\" \\\"\" + charData + \"\\\" should not contain the string\") + \" '--'\");\n      }\n\n      if (this._replaceInvalidCharsInCharData) {\n        if (charData.lastIndexOf(\"-\") === charData.length - 1) {\n          charData = charData.substr(0, charData.length - 1) + \"\\uFFFD\";\n        }\n      } else if (this._validation && charData.lastIndexOf(\"-\") === charData.length - 1) {\n        throw new Error(error_1.getContext(this.up()) + \": comment content\" + (\" \\\"\" + charData + \"\\\" should not end with the string\") + \" '-'\");\n      }\n\n      this._charData = charData;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Returns an XML string representation of this comment.\n   */\n\n  XmlComment.prototype.toString = function () {\n    return \"<!--\" + this._charData + \"-->\";\n  };\n  /**\n   * Returns the parent of this comment.\n   */\n\n\n  XmlComment.prototype.up = function () {\n    return this._parent;\n  };\n\n  return XmlComment;\n}();\n\nexports.default = XmlComment;","map":null,"metadata":{},"sourceType":"script"}