{"ast":null,"code":"\"use strict\";\n/**\n * Copyright (C) 2016-2019 Michael Kourlas\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar error_1 = require(\"../error\");\n\nvar escape_1 = require(\"../escape\");\n\nvar options_1 = require(\"../options\");\n\nvar validate_1 = require(\"../validate\");\n\nvar XmlAttributeText_1 = __importDefault(require(\"./XmlAttributeText\"));\n\nvar XmlCharRef_1 = __importDefault(require(\"./XmlCharRef\"));\n\nvar XmlEntityRef_1 = __importDefault(require(\"./XmlEntityRef\"));\n/**\n * Represents an attribute.\n *\n * An attribute is part of the start tag of an element and is\n * structured as follows, where `{name}` is the name of the attribute and\n * `{value}` is the value of the attribute:\n *\n * ```xml\n * <element {name}=\"{value}\">\n * ```\n *\n * The `{name}` value is a property of this node, while the `{value}` property\n * consists of the children of this node.\n *\n * Attributes can have an unlimited number of attribute text, character\n * references, and entity references.\n */\n\n\nvar XmlAttribute =\n/** @class */\nfunction () {\n  function XmlAttribute(parent, validation, options) {\n    this._validation = validation;\n\n    if (!validate_1.isUndefined(options.replaceInvalidCharsInName)) {\n      this._replaceInvalidCharsInName = options.replaceInvalidCharsInName;\n    } else {\n      this._replaceInvalidCharsInName = false;\n    }\n\n    this._children = [];\n    this._parent = parent;\n    this.name = options.name;\n  }\n\n  Object.defineProperty(XmlAttribute.prototype, \"name\", {\n    /**\n     * Gets the name of this attribute.\n     */\n    get: function get() {\n      return this._name;\n    },\n\n    /**\n     * Sets the name of this attribute.\n     */\n    set: function set(name) {\n      if (this._replaceInvalidCharsInName) {\n        name = validate_1.fixName(name);\n\n        if (name.length === 0) {\n          throw new Error(error_1.getContext(this.up()) + \": attribute name\" + \" should not be empty\");\n        }\n      } else if (this._validation && !validate_1.validateName(name)) {\n        if (name.length === 0) {\n          throw new Error(error_1.getContext(this.up()) + \": attribute name\" + \" should not be empty\");\n        } else {\n          throw new Error(error_1.getContext(this.up()) + \": attribute name\" + (\" \\\"\" + name + \"\\\" should not contain characters not\") + \" allowed in XML names\");\n        }\n      }\n\n      this._name = name;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Adds a character reference to this attribute and returns the new\n   * character reference.\n   */\n\n  XmlAttribute.prototype.charRef = function (options) {\n    var charRef = new XmlCharRef_1.default(this, this._validation, options);\n\n    this._children.push(charRef);\n\n    return charRef;\n  };\n  /**\n   * Adds an entity reference to this attribute and returns the new entity\n   * reference.\n   */\n\n\n  XmlAttribute.prototype.entityRef = function (options) {\n    var charRef = new XmlEntityRef_1.default(this, this._validation, options);\n\n    this._children.push(charRef);\n\n    return charRef;\n  };\n  /**\n   * Adds attribute text to this attribute and returns the new text.\n   */\n\n\n  XmlAttribute.prototype.text = function (options) {\n    var textNode = new XmlAttributeText_1.default(this, this._validation, options);\n\n    this._children.push(textNode);\n\n    return textNode;\n  };\n  /**\n   * Returns an XML string representation of this attribute.\n   */\n\n\n  XmlAttribute.prototype.toString = function (options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var optionsObj = new options_1.StringOptions(options);\n    var quote = optionsObj.doubleQuotes ? \"\\\"\" : \"'\";\n    var str = this._name + \"=\" + quote;\n\n    for (var _i = 0, _a = this._children; _i < _a.length; _i++) {\n      var child = _a[_i];\n\n      if (optionsObj.doubleQuotes) {\n        str += escape_1.escapeDoubleQuotes(child.toString());\n      } else {\n        str += escape_1.escapeSingleQuotes(child.toString());\n      }\n    }\n\n    str += quote;\n    return str;\n  };\n  /**\n   * Returns the parent of this attribute.\n   */\n\n\n  XmlAttribute.prototype.up = function () {\n    return this._parent;\n  };\n\n  return XmlAttribute;\n}();\n\nexports.default = XmlAttribute;","map":null,"metadata":{},"sourceType":"script"}