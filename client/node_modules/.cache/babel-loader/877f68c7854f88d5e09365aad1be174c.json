{"ast":null,"code":"\"use strict\";\n/**\n * Copyright (C) 2016-2019 Michael Kourlas\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar error_1 = require(\"../error\");\n\nvar options_1 = require(\"../options\");\n\nvar validate_1 = require(\"../validate\");\n\nvar XmlAttribute_1 = __importDefault(require(\"./XmlAttribute\"));\n\nvar XmlCdata_1 = __importDefault(require(\"./XmlCdata\"));\n\nvar XmlCharData_1 = __importDefault(require(\"./XmlCharData\"));\n\nvar XmlCharRef_1 = __importDefault(require(\"./XmlCharRef\"));\n\nvar XmlComment_1 = __importDefault(require(\"./XmlComment\"));\n\nvar XmlEntityRef_1 = __importDefault(require(\"./XmlEntityRef\"));\n\nvar XmlProcInst_1 = __importDefault(require(\"./XmlProcInst\"));\n/**\n * Represents an XML element.\n *\n * A sample element is structured as follows, where `{name}` is the name\n * of the element:\n *\n * ```xml\n * <{name} attname=\"attvalue\">\n *     <subelem/>\n *     <?pitarget picontent?>\n *     text\n * </{name}></pre>\n * ```\n *\n * XML elements can have an unlimited number of attributes, CDATA sections,\n * character references, comments, elements, entity references, processing\n * instructions, and character data.\n *\n * An element with no content will be represented using an empty element tag:\n *\n * ```xml\n * <{name}/>\n * ```\n */\n\n\nvar XmlElement =\n/** @class */\nfunction () {\n  function XmlElement(parent, validation, options) {\n    this._validation = validation;\n\n    if (!validate_1.isUndefined(options.replaceInvalidCharsInName)) {\n      this._replaceInvalidCharsInName = options.replaceInvalidCharsInName;\n    } else {\n      this._replaceInvalidCharsInName = false;\n    }\n\n    if (!validate_1.isUndefined(options.useSelfClosingTagIfEmpty)) {\n      this._useSelfClosingTagIfEmpty = options.useSelfClosingTagIfEmpty;\n    } else {\n      this._useSelfClosingTagIfEmpty = true;\n    }\n\n    this._children = [];\n    this._attributeNames = [];\n    this._parent = parent;\n    this.name = options.name;\n  }\n\n  Object.defineProperty(XmlElement.prototype, \"name\", {\n    /**\n     * Gets the name of this element.\n     */\n    get: function get() {\n      return this._name;\n    },\n\n    /**\n     * Sets the name of this element.\n     */\n    set: function set(name) {\n      if (this._replaceInvalidCharsInName) {\n        name = validate_1.fixName(name);\n\n        if (name.length === 0) {\n          throw new Error(error_1.getContext(this.up()) + \": element name should\" + \" not be empty\");\n        }\n      } else if (this._validation && !validate_1.validateName(name)) {\n        if (name.length === 0) {\n          throw new Error(error_1.getContext(this.up()) + \": element name should\" + \" not be empty\");\n        } else {\n          throw new Error(error_1.getContext(this.up()) + \": element name\" + (\" \\\"\" + name + \"\\\" should not contain characters not\") + \" allowed in XML names\");\n        }\n      }\n\n      this._name = name;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Adds an attribute to this element and returns the new attribute.\n   */\n\n  XmlElement.prototype.attribute = function (options) {\n    if (this._validation && this._attributeNames.indexOf(options.name) !== -1) {\n      throw new Error(error_1.getContext(this.up()) + \": element \\\"\" + this.name + \"\\\"\" + \" already contains an attribute with the\" + (\" name \\\"\" + options.name + \"\\\"\"));\n    }\n\n    var attribute = new XmlAttribute_1.default(this, this._validation, options);\n\n    this._children.push(attribute);\n\n    this._attributeNames.push(options.name);\n\n    return attribute;\n  };\n  /**\n   * Adds a CDATA section to this element and returns the new CDATA section.\n   */\n\n\n  XmlElement.prototype.cdata = function (options) {\n    var cdata = new XmlCdata_1.default(this, this._validation, options);\n\n    this._children.push(cdata);\n\n    return cdata;\n  };\n  /**\n   * Adds character data to this element and returns the new character data.\n   */\n\n\n  XmlElement.prototype.charData = function (options) {\n    var charDataNode = new XmlCharData_1.default(this, this._validation, options);\n\n    this._children.push(charDataNode);\n\n    return charDataNode;\n  };\n  /**\n   * Adds a character reference to this element and returns the new\n   * character reference.\n   */\n\n\n  XmlElement.prototype.charRef = function (options) {\n    var charRef = new XmlCharRef_1.default(this, this._validation, options);\n\n    this._children.push(charRef);\n\n    return charRef;\n  };\n  /**\n   * Adds a comment to this element and returns the new comment.\n   */\n\n\n  XmlElement.prototype.comment = function (options) {\n    var comment = new XmlComment_1.default(this, this._validation, options);\n\n    this._children.push(comment);\n\n    return comment;\n  };\n  /**\n   * Adds an element to this element and returns the new element.\n   */\n\n\n  XmlElement.prototype.element = function (options) {\n    var element = new XmlElement(this, this._validation, options);\n\n    this._children.push(element);\n\n    return element;\n  };\n  /**\n   * Adds an entity reference to this element and returns the new entity\n   * reference.\n   */\n\n\n  XmlElement.prototype.entityRef = function (options) {\n    var entityRef = new XmlEntityRef_1.default(this, this._validation, options);\n\n    this._children.push(entityRef);\n\n    return entityRef;\n  };\n  /**\n   * Adds a processing instruction to this element and returns the new\n   * processing instruction.\n   */\n\n\n  XmlElement.prototype.procInst = function (options) {\n    var procInst = new XmlProcInst_1.default(this, this._validation, options);\n\n    this._children.push(procInst);\n\n    return procInst;\n  };\n  /**\n   * Returns an XML string representation of this element using the specified\n   * options.\n   */\n\n\n  XmlElement.prototype.toString = function (options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return this.toStringWithIndent(options, \"\");\n  };\n  /**\n   * Returns the parent of this element.\n   */\n\n\n  XmlElement.prototype.up = function () {\n    return this._parent;\n  };\n  /**\n   * Returns an XML string representation of this element using the specified\n   * options and initial indent.\n   */\n\n\n  XmlElement.prototype.toStringWithIndent = function (options, indent) {\n    var optionsObj = new options_1.StringOptions(options);\n    var newIndent = indent + optionsObj.indent; // Element tag start\n\n    var str = \"<\" + this._name; // Attributes and other nodes\n\n    var nodes = [];\n\n    for (var _i = 0, _a = this._children; _i < _a.length; _i++) {\n      var node = _a[_i];\n\n      if (node instanceof XmlAttribute_1.default) {\n        str += \" \" + node.toString(options);\n      } else {\n        nodes.push(node);\n      }\n    } // Child nodes\n\n\n    if (nodes.length > 0) {\n      var childStr = \"\";\n\n      for (var i = 0; i < nodes.length; i++) {\n        var next = nodes[i];\n        var nextStr = \"\";\n\n        if (next instanceof XmlElement) {\n          nextStr += next.toStringWithIndent(optionsObj, newIndent);\n        } else {\n          nextStr += next.toString();\n        }\n\n        var prev = i > 0 ? nodes[i - 1] : undefined; // Skip empty nodes\n\n        if (next instanceof XmlCharData_1.default && next.toString() === \"\") {\n          continue;\n        } // Line break before child nodes unless all nodes, or at least\n        // the most recent two, are of type XmlCharacterReference,\n        // XmlEntityReference, or XmlCharData\n\n\n        if (optionsObj.pretty) {\n          if (!this.allSameLineNodes(nodes)) {\n            if (!(i > 0 && this.onSameLine(next, prev))) {\n              nextStr = optionsObj.newline + newIndent + nextStr;\n            }\n          }\n        }\n\n        childStr += nextStr;\n      } // Line break before end tag unless all nodes are of type\n      // XmlCharacterReference, XmlEntityReference, or XmlCharData\n\n\n      if (optionsObj.pretty) {\n        if (!this.allSameLineNodes(nodes)) {\n          childStr += optionsObj.newline + indent;\n        }\n      }\n\n      if (childStr.length === 0 && this._useSelfClosingTagIfEmpty) {\n        // Element empty tag end\n        str += \"/>\";\n      } else {\n        // Element start and end tags\n        str += \">\" + childStr + \"</\" + this._name + \">\";\n      }\n    } else {\n      // Element empty tag end\n      str += \"/>\";\n    }\n\n    return str;\n  };\n  /**\n   * Returns true if the specified nodes are all character references,\n   * entity references, or character data.\n   */\n\n\n  XmlElement.prototype.allSameLineNodes = function (nodes) {\n    for (var _i = 0, nodes_1 = nodes; _i < nodes_1.length; _i++) {\n      var node = nodes_1[_i];\n\n      if (!(node instanceof XmlCharRef_1.default || node instanceof XmlEntityRef_1.default || node instanceof XmlCharData_1.default)) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n  /**\n   * Returns true if the specified nodes are all character references,\n   * entity references, or character data.\n   */\n\n\n  XmlElement.prototype.onSameLine = function (prev, next) {\n    return (prev instanceof XmlCharRef_1.default || prev instanceof XmlEntityRef_1.default || prev instanceof XmlCharData_1.default) && !validate_1.isUndefined(next) && (next instanceof XmlCharRef_1.default || next instanceof XmlEntityRef_1.default || next instanceof XmlCharData_1.default);\n  };\n\n  return XmlElement;\n}();\n\nexports.default = XmlElement;","map":null,"metadata":{},"sourceType":"script"}