{"ast":null,"code":"\"use strict\";\n/**\n * Copyright (C) 2016-2019 Michael Kourlas\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar error_1 = require(\"../error\");\n\nvar options_1 = require(\"../options\");\n\nvar validate_1 = require(\"../validate\");\n/**\n * Represents a declaration.\n *\n * A declaration is structured as follows, where `{version}` is the XML\n * version, `{encoding}` is the encoding of the document, and `{standalone}`\n * is either \"yes\" or \"no\", depending on whether the document may contain\n * external markup declarations:\n *\n * ```xml\n * <?xml version=\"{version}\" encoding=\"{encoding}\" standalone=\"{standalone}\"?>\n * ```\n */\n\n\nvar XmlDecl =\n/** @class */\nfunction () {\n  function XmlDecl(parent, validation, options) {\n    this._version = \"1.0\";\n    this._validation = validation;\n    this._parent = parent;\n    this.encoding = options.encoding;\n    this.standalone = options.standalone;\n\n    if (!validate_1.isUndefined(options.version)) {\n      this.version = options.version;\n    }\n  }\n\n  Object.defineProperty(XmlDecl.prototype, \"encoding\", {\n    /**\n     * Gets the encoding associated with this declaration.\n     */\n    get: function get() {\n      return this._encoding;\n    },\n\n    /**\n     * Sets the encoding associated with this declaration.\n     */\n    set: function set(encoding) {\n      if (this._validation && !validate_1.isUndefined(encoding)) {\n        if (!validateEncoding(encoding)) {\n          throw new Error(error_1.getContext(this.up()) + \": declaration\" + (\" encoding attribute \" + encoding + \" should be a\") + \" valid encoding\");\n        }\n      }\n\n      this._encoding = encoding;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XmlDecl.prototype, \"standalone\", {\n    /**\n     * Gets the value of the standalone attribute associated with this\n     * declaration.\n     */\n    get: function get() {\n      return this._standalone;\n    },\n\n    /**\n     * Sets the value of the standalone attribute associated with this\n     * declaration.\n     */\n    set: function set(standalone) {\n      if (this._validation && !validate_1.isUndefined(standalone)) {\n        if (standalone !== \"yes\" && standalone !== \"no\") {\n          throw new Error(error_1.getContext(this.up()) + \": declaration\" + (\" standalone attribute \" + standalone + \" should\") + \" be the string 'yes' or the string 'no'\");\n        }\n      }\n\n      this._standalone = standalone;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XmlDecl.prototype, \"version\", {\n    /**\n     * Gets the XML version associated with this declaration.\n     */\n    get: function get() {\n      return this._version;\n    },\n\n    /**\n     * Sets the XML version associated with this declaration.\n     */\n    set: function set(version) {\n      if (this._validation && !validateVersion(version)) {\n        throw new Error(error_1.getContext(this.up()) + \": declaration version\" + (\" attribute \" + version + \" should be a valid XML\") + \" version\");\n      }\n\n      this._version = version;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Returns an XML string representation of this declaration.\n   */\n\n  XmlDecl.prototype.toString = function (options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var optionsObj = new options_1.StringOptions(options);\n    var quote = optionsObj.doubleQuotes ? '\"' : \"'\";\n    var str = \"<?xml version=\" + quote + this._version + quote;\n\n    if (!validate_1.isUndefined(this._encoding)) {\n      str += \" encoding=\" + quote + this._encoding + quote;\n    }\n\n    if (!validate_1.isUndefined(this._standalone)) {\n      str += \" standalone=\" + quote + this._standalone + quote;\n    }\n\n    str += \"?>\";\n    return str;\n  };\n  /**\n   * Returns the parent of this declaration.\n   */\n\n\n  XmlDecl.prototype.up = function () {\n    return this._parent;\n  };\n\n  return XmlDecl;\n}();\n\nexports.default = XmlDecl;\n/**\n * Returns true if the specified encoding only contains characters permitted by\n * the XML specification.\n *\n * @private\n */\n\nfunction validateEncoding(str) {\n  if (str.length === 0) {\n    return false;\n  }\n\n  var initialChar = str.charCodeAt(0);\n\n  if (!(initialChar >= 0x41 && initialChar <= 0x5A || initialChar >= 0x61 && initialChar <= 0x7A)) {\n    return false;\n  }\n\n  for (var i = 1; i < str.length; i++) {\n    var _char = str.charCodeAt(i);\n\n    if (_char === 0x5F || _char === 0x2D || _char === 0x2E || _char >= 0x30 && _char <= 0x39 || _char >= 0x41 && _char <= 0x5A || _char >= 0x61 && _char <= 0x7A) {\n      continue;\n    }\n\n    if (i + 1 === str.length) {\n      return false;\n    }\n\n    return false;\n  }\n\n  return true;\n}\n/**\n * Returns true if the specified version only contains characters permitted by\n * the XML specification.\n *\n * @private\n */\n\n\nfunction validateVersion(str) {\n  for (var i = 0; i <= 9; i++) {\n    if (str === \"1.\" + i) {\n      return true;\n    }\n  }\n\n  return false;\n}","map":null,"metadata":{},"sourceType":"script"}