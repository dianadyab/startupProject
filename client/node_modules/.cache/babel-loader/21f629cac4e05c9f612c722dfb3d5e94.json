{"ast":null,"code":"\"use strict\";\n/**\n * Copyright (C) 2016-2019 Michael Kourlas\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * @private\n */\n\nfunction isUndefined(val) {\n  return Object.prototype.toString.call(val) === \"[object Undefined]\";\n}\n\nexports.isUndefined = isUndefined;\n/**\n * @private\n */\n\nfunction isNull(val) {\n  return Object.prototype.toString.call(val) === \"[object Null]\";\n}\n\nexports.isNull = isNull;\n/* tslint:disable:ban-types */\n\n/**\n * @private\n */\n\nfunction isObject(val) {\n  return Object.prototype.toString.call(val) === \"[object Object]\";\n}\n\nexports.isObject = isObject;\n/* tslint:enable:ban-types */\n\n/**\n * @private\n */\n\nfunction isArray(val) {\n  return Object.prototype.toString.call(val) === \"[object Array]\";\n}\n\nexports.isArray = isArray;\n/* tslint:disable:ban-types */\n\n/**\n * @private\n */\n\nfunction isFunction(val) {\n  return Object.prototype.toString.call(val) === \"[object Function]\";\n}\n\nexports.isFunction = isFunction;\n/* tslint:enable:ban-types */\n\n/**\n * @private\n */\n\nfunction isSet(val) {\n  return Object.prototype.toString.call(val) === \"[object Set]\";\n}\n\nexports.isSet = isSet;\n/**\n * @private\n */\n\nfunction isMap(val) {\n  return Object.prototype.toString.call(val) === \"[object Map]\";\n}\n\nexports.isMap = isMap;\n/**\n * Returns a string representation of the specified value, as given by the\n * value's toString() method (if it has one) or the global String() function\n * (if it does not).\n *\n * @param value The value to convert to a string.\n *\n * @returns A string representation of the specified value.\n *\n * @private\n */\n\nfunction stringify(value) {\n  if (!isUndefined(value) && !isNull(value)) {\n    if (!isFunction(value.toString)) {\n      value = value.toString();\n    }\n  }\n\n  return String(value);\n}\n\nexports.stringify = stringify;","map":null,"metadata":{},"sourceType":"script"}