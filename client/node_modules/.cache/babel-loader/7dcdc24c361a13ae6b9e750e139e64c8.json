{"ast":null,"code":"\"use strict\";\n/**\n * Copyright (C) 2016-2019 Michael Kourlas\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Returns true if the specified string only contains characters permitted by\n * the XML specification.\n *\n * @private\n */\n\nfunction validateChar(str) {\n  for (var i = 0; i < str.length; i++) {\n    var firstChar = str.charCodeAt(i);\n\n    if (firstChar === 0x9 || firstChar === 0xA || firstChar === 0xD || firstChar >= 0x20 && firstChar <= 0xD7FF || firstChar >= 0xE000 && firstChar <= 0xFFFD) {\n      continue;\n    }\n\n    if (i + 1 === str.length) {\n      return false;\n    } // UTF-16 surrogate characters\n\n\n    var secondChar = str.charCodeAt(i + 1);\n\n    if (firstChar >= 0xD800 && firstChar <= 0xDBFF && secondChar >= 0xDC00 && secondChar <= 0xDFFF) {\n      i++;\n      continue;\n    }\n\n    return false;\n  }\n\n  return true;\n}\n\nexports.validateChar = validateChar;\n/**\n * Returns a version of the specified string that only contains characters\n * permitted by the XML specification, with invalid characters replaced\n * by the replacement character U+FFFD.\n *\n * @private\n */\n\nfunction fixChar(str) {\n  var newStr = \"\";\n\n  for (var i = 0; i < str.length; i++) {\n    var firstChar = str.charCodeAt(i);\n\n    if (firstChar === 0x9 || firstChar === 0xA || firstChar === 0xD || firstChar >= 0x20 && firstChar <= 0xD7FF || firstChar >= 0xE000 && firstChar <= 0xFFFD) {\n      newStr += str[i];\n      continue;\n    }\n\n    if (i + 1 === str.length) {\n      newStr += \"\\uFFFD\";\n      return newStr;\n    } // UTF-16 surrogate characters\n\n\n    var secondChar = str.charCodeAt(i + 1);\n\n    if (firstChar >= 0xD800 && firstChar <= 0xDBFF && secondChar >= 0xDC00 && secondChar <= 0xDFFF) {\n      newStr += str[i] + str[i + 1];\n      i++;\n      continue;\n    }\n\n    newStr += \"\\uFFFD\";\n  }\n\n  return newStr;\n}\n\nexports.fixChar = fixChar;\n/**\n * Returns true if the specified string only contains a single character, and\n * that this character is permitted by the XML specification.\n *\n * @private\n */\n\nfunction validateSingleChar(str) {\n  if (str.length === 0) {\n    return false;\n  }\n\n  var firstChar = str.charCodeAt(0);\n\n  if (str.length === 1) {\n    return firstChar === 0x9 || firstChar === 0xA || firstChar === 0xD || firstChar >= 0x20 && firstChar <= 0xD7FF || firstChar >= 0xE000 && firstChar <= 0xFFFD;\n  }\n\n  if (str.length !== 2) {\n    return false;\n  } // UTF-16 surrogate characters\n\n\n  var secondChar = str.charCodeAt(1);\n  return firstChar >= 0xD800 && firstChar <= 0xDBFF && secondChar >= 0xDC00 && secondChar <= 0xDFFF;\n}\n\nexports.validateSingleChar = validateSingleChar;\n/**\n * Returns true if the specified string only contains characters permitted by\n * the XML specification for names.\n *\n * @private\n */\n\nfunction validateName(str) {\n  if (str.length === 0) {\n    return false;\n  }\n\n  var initialFirstChar = str.charCodeAt(0);\n  var initialFirstCharMatch = initialFirstChar === 0x3A || initialFirstChar === 0x5F || initialFirstChar >= 0x41 && initialFirstChar <= 0x5A || initialFirstChar >= 0x61 && initialFirstChar <= 0x7A || initialFirstChar >= 0xC0 && initialFirstChar <= 0xD6 || initialFirstChar >= 0xD8 && initialFirstChar <= 0xF6 || initialFirstChar >= 0XF8 && initialFirstChar <= 0X2FF || initialFirstChar >= 0x370 && initialFirstChar <= 0x37D || initialFirstChar >= 0x37F && initialFirstChar <= 0X1FFF || initialFirstChar >= 0x200C && initialFirstChar <= 0x200D || initialFirstChar >= 0x2070 && initialFirstChar <= 0x218F || initialFirstChar >= 0x2C00 && initialFirstChar <= 0x2FEF || initialFirstChar >= 0x3001 && initialFirstChar <= 0xD7FF || initialFirstChar >= 0xF900 && initialFirstChar <= 0xFDCF || initialFirstChar >= 0xFDF0 && initialFirstChar <= 0xFFFD;\n\n  if (str.length === 1) {\n    return initialFirstCharMatch;\n  } // UTF-16 surrogate characters\n\n\n  var initialSecondChar = str.charCodeAt(1);\n  var initialSecondCharMatch = initialFirstChar >= 0xD800 && initialFirstChar <= 0xDB7F && initialSecondChar >= 0xDC00 && initialSecondChar <= 0xDFFF;\n\n  if (!initialFirstCharMatch && !initialSecondCharMatch) {\n    return false;\n  }\n\n  var start = initialSecondCharMatch ? 2 : 1;\n\n  for (var i = start; i < str.length; i++) {\n    var firstChar = str.charCodeAt(i);\n\n    if (firstChar === 0x3A || firstChar === 0x5F || firstChar === 0x2D || firstChar === 0x2E || firstChar === 0xB7 || firstChar >= 0x30 && firstChar <= 0x39 || firstChar >= 0x41 && firstChar <= 0x5A || firstChar >= 0x61 && firstChar <= 0x7A || firstChar >= 0xC0 && firstChar <= 0xD6 || firstChar >= 0xD8 && firstChar <= 0xF6 || firstChar >= 0XF8 && firstChar <= 0X2FF || firstChar >= 0x300 && firstChar <= 0x36F || firstChar >= 0x370 && firstChar <= 0x37D || firstChar >= 0x37F && firstChar <= 0X1FFF || firstChar >= 0x200C && firstChar <= 0x200D || firstChar >= 0x203F && firstChar <= 0x2040 || firstChar >= 0x2070 && firstChar <= 0x218F || firstChar >= 0x2C00 && firstChar <= 0x2FEF || firstChar >= 0x3001 && firstChar <= 0xD7FF || firstChar >= 0xF900 && firstChar <= 0xFDCF || firstChar >= 0xFDF0 && firstChar <= 0xFFFD) {\n      continue;\n    }\n\n    if (i + 1 === str.length) {\n      return false;\n    } // UTF-16 surrogate characters\n\n\n    var secondChar = str.charCodeAt(i + 1);\n\n    if (firstChar >= 0xD800 && firstChar <= 0xDB7F && secondChar >= 0xDC00 && secondChar <= 0xDFFF) {\n      i++;\n      continue;\n    }\n\n    return false;\n  }\n\n  return true;\n}\n\nexports.validateName = validateName;\n/**\n * Returns a version of the specified string that only contains characters\n * permitted by the XML specification for names, with invalid characters\n * replaced by the replacement character U+FFFD.\n *\n * @private\n */\n\nfunction fixName(str) {\n  var newStr = \"\";\n\n  if (str.length === 0) {\n    return newStr;\n  }\n\n  var initialFirstChar = str.charCodeAt(0);\n  var initialFirstCharMatch = initialFirstChar === 0x3A || initialFirstChar === 0x5F || initialFirstChar >= 0x41 && initialFirstChar <= 0x5A || initialFirstChar >= 0x61 && initialFirstChar <= 0x7A || initialFirstChar >= 0xC0 && initialFirstChar <= 0xD6 || initialFirstChar >= 0xD8 && initialFirstChar <= 0xF6 || initialFirstChar >= 0XF8 && initialFirstChar <= 0X2FF || initialFirstChar >= 0x370 && initialFirstChar <= 0x37D || initialFirstChar >= 0x37F && initialFirstChar <= 0X1FFF || initialFirstChar >= 0x200C && initialFirstChar <= 0x200D || initialFirstChar >= 0x2070 && initialFirstChar <= 0x218F || initialFirstChar >= 0x2C00 && initialFirstChar <= 0x2FEF || initialFirstChar >= 0x3001 && initialFirstChar <= 0xD7FF || initialFirstChar >= 0xF900 && initialFirstChar <= 0xFDCF || initialFirstChar >= 0xFDF0 && initialFirstChar <= 0xFFFD;\n\n  if (str.length === 1) {\n    if (initialFirstCharMatch) {\n      newStr = str[0];\n    } else {\n      newStr = \"\\uFFFD\";\n    }\n\n    return newStr;\n  } // UTF-16 surrogate characters\n\n\n  var initialSecondChar = str.charCodeAt(1);\n  var initialSecondCharMatch = initialFirstChar >= 0xD800 && initialFirstChar <= 0xDB7F && initialSecondChar >= 0xDC00 && initialSecondChar <= 0xDFFF;\n\n  if (initialSecondCharMatch) {\n    newStr = str[0] + str[1];\n  } else if (initialFirstCharMatch) {\n    newStr = str[0];\n  } else {\n    newStr = \"\\uFFFD\";\n  }\n\n  var start = initialSecondCharMatch ? 2 : 1;\n\n  for (var i = start; i < str.length; i++) {\n    var firstChar = str.charCodeAt(i);\n\n    if (firstChar === 0x3A || firstChar === 0x5F || firstChar === 0x2D || firstChar === 0x2E || firstChar === 0xB7 || firstChar >= 0x30 && firstChar <= 0x39 || firstChar >= 0x41 && firstChar <= 0x5A || firstChar >= 0x61 && firstChar <= 0x7A || firstChar >= 0xC0 && firstChar <= 0xD6 || firstChar >= 0xD8 && firstChar <= 0xF6 || firstChar >= 0XF8 && firstChar <= 0X2FF || firstChar >= 0x300 && firstChar <= 0x36F || firstChar >= 0x370 && firstChar <= 0x37D || firstChar >= 0x37F && firstChar <= 0X1FFF || firstChar >= 0x200C && firstChar <= 0x200D || firstChar >= 0x203F && firstChar <= 0x2040 || firstChar >= 0x2070 && firstChar <= 0x218F || firstChar >= 0x2C00 && firstChar <= 0x2FEF || firstChar >= 0x3001 && firstChar <= 0xD7FF || firstChar >= 0xF900 && firstChar <= 0xFDCF || firstChar >= 0xFDF0 && firstChar <= 0xFFFD) {\n      newStr += str[i];\n      continue;\n    }\n\n    if (i + 1 === str.length) {\n      newStr += \"\\uFFFD\";\n      return newStr;\n    } // UTF-16 surrogate characters\n\n\n    var secondChar = str.charCodeAt(i + 1);\n\n    if (firstChar >= 0xD800 && firstChar <= 0xDB7F && secondChar >= 0xDC00 && secondChar <= 0xDFFF) {\n      newStr += str[i] + str[i + 1];\n      i++;\n      continue;\n    }\n\n    newStr += \"\\uFFFD\";\n  }\n\n  return newStr;\n}\n\nexports.fixName = fixName;\n/**\n * Returns true if the specified value is undefined.\n *\n * @private\n */\n\nfunction isUndefined(val) {\n  return Object.prototype.toString.call(val) === \"[object Undefined]\";\n}\n\nexports.isUndefined = isUndefined;","map":null,"metadata":{},"sourceType":"script"}